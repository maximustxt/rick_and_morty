{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\OneDrive\\\\Escritorio\\\\rick_and_morty\\\\Front\\\\src\\\\components\\\\Card\\\\Card.jsx\",\n  _s = $RefreshSig$();\nimport { Link } from \"react-router-dom\";\nimport { getFavorites, RemplaceFav } from \"../../redux/actions\";\nimport styles from \"./Card.module.css\"; // el ./ => esto quiere decir que es en la carpeta... ../ sale de la carpeta y entra en la carpeta que le indiquemos => ../Card/Card.jsx\nimport { useDispatch, useSelector } from \"react-redux\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\n// import imagen from \"../image/multiplicar.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Card(_ref) {\n  _s();\n  let {\n    id,\n    name,\n    species,\n    gender,\n    image,\n    onClose\n  } = _ref;\n  const [isFav, setIsFav] = useState(false);\n  const dispatch = useDispatch();\n  const myFavorites = useSelector(state => state.myFavorites);\n  const character = {\n    name,\n    species,\n    gender,\n    image\n  };\n  const idUser = useSelector(state => state.idUser);\n  if (!idUser) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this); // o algún otro indicador de que el estado aún no se ha inicializado\n  }\n\n  useEffect(() => {\n    myFavorites.forEach(fav => {\n      if (fav.id === id) {\n        setIsFav(true);\n      }\n    });\n  }, [myFavorites]);\n  const addFavorite = async character => {\n    const Character = {\n      ...character,\n      idUser: idUser\n    };\n    try {\n      console.log(idUser);\n      dispatch(getFavorites(idUser));\n      await axios.post(\"http://localhost:3001/favoritos\", Character); // character sweia el body que luego lo usamos en nuestro servidor y aparte character es lo que le pasamos como argumento a esta funcion cuando hacemos la funcion handleFavorite ===> character ===> addFavorite({ id, name, species, gender, image }).\n      alert(\"Personaje agregado como Favorito\");\n    } catch (error) {\n      alert(error.response.data.error);\n    }\n  };\n\n  // dispatch(getFavorites(idUser));\n\n  const deleteFavorite = async (id, idUser) => {\n    try {\n      const result = await axios.delete(`http://localhost:3001/favoritos/${id}?idUser=${idUser}`); // character sweia el body que luego lo usamos en nuestro servidor y aparte character es lo que le pasamos como argumento a esta funcion cuando hacemos la funcion handleFavorite ===> character ===> addFavorite({ id, name, species, gender, image }).\n      // const arrayNuevo = myFavorites?.filter((Favs) => Favs.id !== id);\n      // console.log(arrayNuevo);\n      dispatch(RemplaceFav(result.data));\n      alert(\"Card eliminada con exito!!\");\n    } catch (error) {\n      alert(error.response.data.error);\n    }\n  };\n  //dispatch le enviaba informacion a las actiond para que despues la funcion reduce , cambie o modifique el estado global con esa misma informacion\n\n  const handleFavorite = () => {\n    if (isFav === true) {\n      setIsFav(false);\n      deleteFavorite(id, idUser); // esto le manda a action ==> {type: delete , payload : id que nos dan por aca..}\n    } else {\n      setIsFav(true);\n      addFavorite(character, idUser);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.contenedor,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.divBoton,\n      children: [isFav ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.boton11,\n        onClick: handleFavorite,\n        children: \"\\u2764\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.boton11,\n        onClick: handleFavorite,\n        children: \"\\uD83E\\uDD0D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.boton,\n        onClick: () => onClose(id),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.caracter,\n      children: [\"Nombre: \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.caracter,\n      children: [\"Specie: \", species]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.caracter,\n      children: [\"Genero: \", gender]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/detail/${id}`,\n      className: styles.Link,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: styles.img,\n        src: image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n// traemos el state global de redux , esto no los brinda la funcion conecct()..\n// y luego esto lo tenemos como props en nuestro componentes Card..\n_s(Card, \"v8c/6k56YIRw31X8/6q/5NqkFuU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Card;\nexport default Card;\n{\n  /* <Link to={`/detail/${id}`}> esto seria que cuando aga clic en el link me va aparecer el id de cada personaje en un nuevo servidor o Ruta*/\n}\n{\n  /* pagina the shadow css generator es super util*/\n}\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["Link","getFavorites","RemplaceFav","styles","useDispatch","useSelector","React","useState","useEffect","axios","jsxDEV","_jsxDEV","Card","_ref","_s","id","name","species","gender","image","onClose","isFav","setIsFav","dispatch","myFavorites","state","character","idUser","children","fileName","_jsxFileName","lineNumber","columnNumber","forEach","fav","addFavorite","Character","console","log","post","alert","error","response","data","deleteFavorite","result","delete","handleFavorite","className","contenedor","divBoton","boton11","onClick","boton","caracter","to","img","src","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/OneDrive/Escritorio/rick_and_morty/Front/src/components/Card/Card.jsx"],"sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport { getFavorites, RemplaceFav } from \"../../redux/actions\";\r\nimport styles from \"./Card.module.css\"; // el ./ => esto quiere decir que es en la carpeta... ../ sale de la carpeta y entra en la carpeta que le indiquemos => ../Card/Card.jsx\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n// import imagen from \"../image/multiplicar.png\";\r\n\r\nfunction Card({ id, name, species, gender, image, onClose }) {\r\n  const [isFav, setIsFav] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const myFavorites = useSelector((state) => state.myFavorites);\r\n  const character = { name, species, gender, image };\r\n  const idUser = useSelector((state) => state.idUser);\r\n\r\n  if (!idUser) {\r\n    return <div>Cargando...</div>; // o algún otro indicador de que el estado aún no se ha inicializado\r\n  }\r\n  \r\n  useEffect(() => {\r\n    myFavorites.forEach((fav) => {\r\n      if (fav.id === id) {\r\n        setIsFav(true);\r\n      }\r\n    });\r\n  }, [myFavorites]);\r\n  const addFavorite = async (character) => {\r\n    const Character = { ...character, idUser: idUser };\r\n    try {\r\n      console.log(idUser);\r\n      dispatch(getFavorites(idUser));\r\n      await axios.post(\"http://localhost:3001/favoritos\", Character); // character sweia el body que luego lo usamos en nuestro servidor y aparte character es lo que le pasamos como argumento a esta funcion cuando hacemos la funcion handleFavorite ===> character ===> addFavorite({ id, name, species, gender, image }).\r\n      alert(\"Personaje agregado como Favorito\");\r\n    } catch (error) {\r\n      alert(error.response.data.error);\r\n    }\r\n  };\r\n\r\n  // dispatch(getFavorites(idUser));\r\n  \r\n  const deleteFavorite = async (id, idUser) => {\r\n    try {\r\n      const result = await axios.delete(\r\n        `http://localhost:3001/favoritos/${id}?idUser=${idUser}`\r\n      ); // character sweia el body que luego lo usamos en nuestro servidor y aparte character es lo que le pasamos como argumento a esta funcion cuando hacemos la funcion handleFavorite ===> character ===> addFavorite({ id, name, species, gender, image }).\r\n      // const arrayNuevo = myFavorites?.filter((Favs) => Favs.id !== id);\r\n      // console.log(arrayNuevo);\r\n      dispatch(RemplaceFav(result.data));\r\n      alert(\"Card eliminada con exito!!\");\r\n    } catch (error) {\r\n      alert(error.response.data.error);\r\n    }\r\n  };\r\n  //dispatch le enviaba informacion a las actiond para que despues la funcion reduce , cambie o modifique el estado global con esa misma informacion\r\n\r\n\r\n  const handleFavorite = () => {\r\n    if (isFav === true) {\r\n      setIsFav(false);\r\n      deleteFavorite(id, idUser); // esto le manda a action ==> {type: delete , payload : id que nos dan por aca..}\r\n    } else {\r\n      setIsFav(true);\r\n      addFavorite(character, idUser);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.contenedor}>\r\n      <div className={styles.divBoton}>\r\n        {isFav ? (\r\n          <button className={styles.boton11} onClick={handleFavorite}>\r\n            ❤️\r\n          </button>\r\n        ) : (\r\n          <button className={styles.boton11} onClick={handleFavorite}>\r\n            🤍\r\n          </button>\r\n        )}\r\n        <button className={styles.boton} onClick={() => onClose(id)}>\r\n          X{/* <img className={styles.imagenBoton} src={imagen} /> */}\r\n        </button>\r\n      </div>\r\n      <h2 className={styles.caracter}>Nombre: {name}</h2>\r\n      <h2 className={styles.caracter}>Specie: {species}</h2>\r\n      <h2 className={styles.caracter}>Genero: {gender}</h2>\r\n      <Link to={`/detail/${id}`} className={styles.Link}>\r\n        <img className={styles.img} src={image} />\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\n// traemos el state global de redux , esto no los brinda la funcion conecct()..\r\n// y luego esto lo tenemos como props en nuestro componentes Card..\r\n\r\nexport default Card;\r\n\r\n{\r\n  /* <Link to={`/detail/${id}`}> esto seria que cuando aga clic en el link me va aparecer el id de cada personaje en un nuevo servidor o Ruta*/\r\n}\r\n{\r\n  /* pagina the shadow css generator es super util*/\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}