{"ast":null,"code":"import { AGREGAR, ELIMINAR, FILTER, ORDER } from \"./actions\";\nconst initialState = {\n  myFavorites: [],\n  allCharacters: []\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let actions = arguments.length > 1 ? arguments[1] : undefined;\n  switch (actions.type) {\n    case AGREGAR:\n      return {\n        ...state,\n        myFavorites: [...state.allCharacters, actions.payload],\n        // estamos haciendo un nuevo array con una copia del array allCharacter y sumandole el objeto que es la card favorita..\n        allCharacters: [...state.allCharacters, actions.payload] // aca hacemos una copia del array allCharacter y creando un nuevo array...\n      };\n\n    case ELIMINAR:\n      return {\n        ...state,\n        myFavorites: state.myFavorites.filter(pars => pars.id !== actions.payload)\n      };\n    case FILTER:\n      return {\n        ...state,\n        myFavorites: state.allCharacters.filter(pars => pars.gender === actions.payload)\n      };\n    case ORDER:\n      return {\n        ...state,\n        // si algunos de los casos se cumplio myFavorites pasa a ser el array modificado y ordenado... [id 1 , id 2 , id3] , luego en el componente Favorites.jsx recorro este array y voy renderizando cada personaje en base a su orden...\n        myFavorites: actions.payload === \"Descendente\" ? [...state.allCharacters].sort((a, b) => b.id - a.id) // si b es menor al a ===> decendente..\n        : [...state.allCharacters].sort((a, b) => a.id - b.id) // si a es menor a b ===> acendente... y el metodo sort devuelve un nuevo array con los elementos ordenados..\n      };\n\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default reducer;","map":{"version":3,"names":["AGREGAR","ELIMINAR","FILTER","ORDER","initialState","myFavorites","allCharacters","reducer","state","arguments","length","undefined","actions","type","payload","filter","pars","id","gender","sort","a","b"],"sources":["C:/Users/Usuario/OneDrive/Escritorio/rick_and_morty/Front/src/redux/reducer.js"],"sourcesContent":["import { AGREGAR, ELIMINAR, FILTER, ORDER } from \"./actions\";\r\n\r\nconst initialState = {\r\n  myFavorites: [],\r\n  allCharacters: [],\r\n};\r\n\r\nconst reducer = (state = initialState, actions) => {\r\n  switch (actions.type) {\r\n    case AGREGAR:\r\n      return {\r\n        ...state,\r\n        myFavorites: [...state.allCharacters, actions.payload], // estamos haciendo un nuevo array con una copia del array allCharacter y sumandole el objeto que es la card favorita..\r\n        allCharacters: [...state.allCharacters, actions.payload], // aca hacemos una copia del array allCharacter y creando un nuevo array...\r\n      };\r\n    case ELIMINAR:\r\n      return {\r\n        ...state,\r\n        myFavorites: state.myFavorites.filter(\r\n          (pars) => pars.id !== actions.payload\r\n        ),\r\n      };\r\n    case FILTER:\r\n      return {\r\n        ...state,\r\n        myFavorites: state.allCharacters.filter(\r\n          (pars) => pars.gender === actions.payload\r\n        ),\r\n      };\r\n    case ORDER:\r\n      return {\r\n        ...state,\r\n\r\n        // si algunos de los casos se cumplio myFavorites pasa a ser el array modificado y ordenado... [id 1 , id 2 , id3] , luego en el componente Favorites.jsx recorro este array y voy renderizando cada personaje en base a su orden...\r\n        myFavorites:\r\n          actions.payload === \"Descendente\"\r\n            ? [...state.allCharacters].sort((a, b) => b.id - a.id) // si b es menor al a ===> decendente..\r\n            : [...state.allCharacters].sort((a, b) => a.id - b.id), // si a es menor a b ===> acendente... y el metodo sort devuelve un nuevo array con los elementos ordenados..\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,QAAQ,WAAW;AAE5D,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,EAAE;EACfC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAAmC;EAAA,IAAlCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,YAAY;EAAA,IAAEQ,OAAO,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC5C,QAAQC,OAAO,CAACC,IAAI;IAClB,KAAKb,OAAO;MACV,OAAO;QACL,GAAGQ,KAAK;QACRH,WAAW,EAAE,CAAC,GAAGG,KAAK,CAACF,aAAa,EAAEM,OAAO,CAACE,OAAO,CAAC;QAAE;QACxDR,aAAa,EAAE,CAAC,GAAGE,KAAK,CAACF,aAAa,EAAEM,OAAO,CAACE,OAAO,CAAC,CAAE;MAC5D,CAAC;;IACH,KAAKb,QAAQ;MACX,OAAO;QACL,GAAGO,KAAK;QACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACU,MAAM,CAClCC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACE,OAAO;MAEzC,CAAC;IACH,KAAKZ,MAAM;MACT,OAAO;QACL,GAAGM,KAAK;QACRH,WAAW,EAAEG,KAAK,CAACF,aAAa,CAACS,MAAM,CACpCC,IAAI,IAAKA,IAAI,CAACE,MAAM,KAAKN,OAAO,CAACE,OAAO;MAE7C,CAAC;IACH,KAAKX,KAAK;MACR,OAAO;QACL,GAAGK,KAAK;QAER;QACAH,WAAW,EACTO,OAAO,CAACE,OAAO,KAAK,aAAa,GAC7B,CAAC,GAAGN,KAAK,CAACF,aAAa,CAAC,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACJ,EAAE,GAAGG,CAAC,CAACH,EAAE,CAAC,CAAC;QAAA,EACrD,CAAC,GAAGT,KAAK,CAACF,aAAa,CAAC,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACH,EAAE,GAAGI,CAAC,CAACJ,EAAE,CAAC,CAAE;MAC9D,CAAC;;IACH;MACE,OAAO;QAAE,GAAGT;MAAM,CAAC;EAAC;AAE1B,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}