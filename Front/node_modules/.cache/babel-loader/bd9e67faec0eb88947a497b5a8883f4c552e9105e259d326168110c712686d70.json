{"ast":null,"code":"import axios from \"axios\";\nexport const FILTER = \"FILTER\";\nexport const ORDER = \"ORDER\";\nexport const LOGIN = \"LOGIN\";\nexport const GET_FAVORITES = \"GET_FAVORITES\";\nexport const getFavorites = () => {\n  return async function (dispatch) {\n    const URL_BASE = \"http://localhost:3001\";\n    try {\n      const response = await axios.get(`${URL_BASE}/favoritos`);\n      dispatch({\n        type: GET_FAVORITES,\n        payload: response.data\n      });\n    } catch (error) {\n      if (error.response && error.response.status === 500) {\n        //* cuando me tiraba el error de estado 500 cuando hacia el dispatch del get , aca lo que hago es preguntar por ese error y setear el peyload en un array vacio , de esta manera no mostrara mas la card ultima cundo sea eliminada\n        dispatch({\n          type: GET_FAVORITES,\n          payload: []\n        });\n      } else {\n        //* de lo contrario tirrar el error normal y corriente de catch..\n        throw error;\n      }\n    }\n  };\n};\nexport const Login = (username, password) => {\n  return async function (dispatch) {\n    try {\n      const response = await axios.get(`http://localhost:3001/login?username=${username}&password=${password}`);\n      console.log(response.data.dataValues);\n      if (response.data.access === true) {\n        dispatch({\n          type: LOGIN,\n          payload: response.data.dataValues.id\n        });\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n};\n_c = Login;\nexport const addFavorite = async character => {\n  try {\n    await axios.post(\"http://localhost:3001/favoritos\", character); // character sweia el body que luego lo usamos en nuestro servidor y aparte character es lo que le pasamos como argumento a esta funcion cuando hacemos la funcion handleFavorite ===> character ===> addFavorite({ id, name, species, gender, image }).\n    alert(\"Personaje agregado como Favorito\");\n  } catch (error) {\n    alert(error.response.data.error);\n  }\n};\nexport const deleteFavorite = async id => {\n  return async function (dispatch) {\n    try {\n      const response = await axios.delete(`http://localhost:3001/favoritos/${id}`); // character sweia el body que luego lo usamos en nuestro servidor y aparte character es lo que le pasamos como argumento a esta funcion cuando hacemos la funcion handleFavorite ===> character ===> addFavorite({ id, name, species, gender, image }).\n      alert(\"Card eliminada con exito!!\");\n    } catch (error) {\n      alert(error.response.data.error);\n    }\n  };\n};\nexport const filterCards = gender => {\n  return {\n    type: FILTER,\n    payload: gender\n  };\n};\nexport const orderCards = id => {\n  return {\n    type: ORDER,\n    payload: id\n  };\n};\n\n// export const cleanDetail = () => {\n//   return { type: CLEAN_DETAIL };\n// };\n\n{\n  /*A la funcion delteFavorite recibe el id de los personajes y addFavorite recibe un personaje*/\n}\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["axios","FILTER","ORDER","LOGIN","GET_FAVORITES","getFavorites","dispatch","URL_BASE","response","get","type","payload","data","error","status","Login","username","password","console","log","dataValues","access","id","alert","_c","addFavorite","character","post","deleteFavorite","delete","filterCards","gender","orderCards","$RefreshReg$"],"sources":["C:/Users/Usuario/OneDrive/Escritorio/rick_and_morty/Front/src/redux/actions.js"],"sourcesContent":["import axios from \"axios\";\r\nexport const FILTER = \"FILTER\";\r\nexport const ORDER = \"ORDER\";\r\nexport const LOGIN = \"LOGIN\";\r\nexport const GET_FAVORITES = \"GET_FAVORITES\";\r\n\r\nexport const getFavorites = () => {\r\n  return async function (dispatch) {\r\n    const URL_BASE = \"http://localhost:3001\";\r\n    try {\r\n      const response = await axios.get(`${URL_BASE}/favoritos`);\r\n      dispatch({ type: GET_FAVORITES, payload: response.data });\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 500) {\r\n        //* cuando me tiraba el error de estado 500 cuando hacia el dispatch del get , aca lo que hago es preguntar por ese error y setear el peyload en un array vacio , de esta manera no mostrara mas la card ultima cundo sea eliminada\r\n        dispatch({ type: GET_FAVORITES, payload: [] });\r\n      } else {\r\n        //* de lo contrario tirrar el error normal y corriente de catch..\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const Login = (username, password) => {\r\n  return async function (dispatch) {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:3001/login?username=${username}&password=${password}`\r\n      );\r\n      console.log(response.data.dataValues);\r\n      if (response.data.access === true) {\r\n        dispatch({ type: LOGIN, payload: response.data.dataValues.id });\r\n      }\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const addFavorite = async (character) => {\r\n  try {\r\n    await axios.post(\"http://localhost:3001/favoritos\", character); // character sweia el body que luego lo usamos en nuestro servidor y aparte character es lo que le pasamos como argumento a esta funcion cuando hacemos la funcion handleFavorite ===> character ===> addFavorite({ id, name, species, gender, image }).\r\n    alert(\"Personaje agregado como Favorito\");\r\n  } catch (error) {\r\n    alert(error.response.data.error);\r\n  }\r\n};\r\n\r\nexport const deleteFavorite = async (id) => {\r\n  return async function (dispatch) {\r\n    try {\r\n      const response = await axios.delete(\r\n        `http://localhost:3001/favoritos/${id}`\r\n      ); // character sweia el body que luego lo usamos en nuestro servidor y aparte character es lo que le pasamos como argumento a esta funcion cuando hacemos la funcion handleFavorite ===> character ===> addFavorite({ id, name, species, gender, image }).\r\n      alert(\"Card eliminada con exito!!\");\r\n    } catch (error) {\r\n      alert(error.response.data.error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const filterCards = (gender) => {\r\n  return { type: FILTER, payload: gender };\r\n};\r\n\r\nexport const orderCards = (id) => {\r\n  return { type: ORDER, payload: id };\r\n};\r\n\r\n// export const cleanDetail = () => {\r\n//   return { type: CLEAN_DETAIL };\r\n// };\r\n\r\n{\r\n  /*A la funcion delteFavorite recibe el id de los personajes y addFavorite recibe un personaje*/\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}