{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\OneDrive\\\\Escritorio\\\\FT-M2\\\\rick_and_morty\\\\src\\\\components\\\\Card\\\\Card.jsx\";\nimport { Link } from \"react-router-dom\";\nimport { addFavorite, deleteFavorite } from \"../../redux/actions\";\nimport styles from \"./Card.module.css\"; // el ./ => esto quiere decir que es en la carpeta... ../ sale de la carpeta y entra en la carpeta que le indiquemos => ../Card/Card.jsx\nimport { connect } from \"react-redux\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFav: false\n    };\n  }\n  // componentDidMount(){\n  //     this.props.myFavorite.forEach(element => {\n  //         if(element.id === this.props.id){\n  //             this.setState(true);\n  //         }\n  //     });\n  // }\n\n  // componentDidMount es un metodo de las class que sirve cuando el componente se monta se ejecuta esta funcion..\n\n  render() {\n    const handleFavorite = () => {\n      if (this.state.isFav === true) {\n        this.setState(false);\n        this.props.deleteFavorite(this.props.id); // aca le pasamos el id..\n      } else {\n        this.setState(true);\n        this.props.addFavorite(this.props); // aca traemos el personaje completo : porque props ===> {con todas las propiedades del mismo}.S\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.contenedor,\n      children: [this.state.isFav ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.boton1,\n        onClick: handleFavorite,\n        children: \"\\u2764\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.boton1,\n        onClick: handleFavorite,\n        children: \"\\uD83E\\uDD0D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.boton,\n        onClick: () => this.props.onClose(this.props.id),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/detail/${this.props.id}`,\n        className: styles.Link,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Nombre: \", this.props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.caracter,\n        children: [\"Specie: \", this.props.species]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles.caracter,\n        children: [\"Genero: \", this.props.gender]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: styles.img,\n        src: this.props.image,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this);\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    myFavorite: state.myFavorite\n  };\n};\n// traemos el state global de redux , esto no los brinda la funcion conecct()..\n// y luego esto lo tenemos como props en nuestro componentes Card..\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addFavorite: character => {\n      dispatch(addFavorite(character));\n    },\n    deleteFavorite: id => {\n      dispatch(deleteFavorite(id));\n    }\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\n\n// export default function Card ({id,name,species,gender,image,onClose}){\n\n//     const [isFav , setIsFav] = useState(false);\n\n//     const dispatch = useDispatch();\n//     // dispatch le enviaba informacion a las actiond para que despues la funcion reduce , cambie o modifique el estado global con esa misma informacion\n\n//    const myFavorite = useSelector(state => state.myFavorite);\n\n//    useEffect(() => {\n//     for(let i = 0; i<myFavorite.length; i++){\n//         if(myFavorite[i].id === props.id){\n//             setIsFav(true);\n//         }\n//     }\n//     // mapStateToProps().forEach((fav) => {\n//     //    if (fav.id === props.id) {\n//     //       setIsFav(true);\n//     //    }\n//     // });\n//  }, [myFavorite]);\n\n//    const handleFavorite = (props) => {\n//     if(isFav === true){\n//         setIsFav(false);\n//         dispatch(deleteFavorite());\n//     } else {\n//         setIsFav(true);\n//         dispatch(addFavorite());\n//     }\n//    }\n\n//     return (\n//         <div className={styles.contenedor}>\n//             {\n//    isFav ? (\n//       <button onClick={handleFavorite}>‚ù§Ô∏è</button>\n//    ) : (\n//       <button onClick={handleFavorite}>ü§ç</button>\n//    )\n// }\n//             <button className={styles.boton} onClick={()=>onClose(id)}>X</button>\n//              <Link to={`/detail/${id}`} className={styles.Link}>  \n//             <h2>Nombre: {name}</h2>\n//             </Link> \n//             <h2 className={styles.caracter} >Specie: {species}</h2>\n//             <h2 className={styles.caracter} >Genero: {gender}</h2>\n//             <img  className={styles.img} src={image} alt=\"\"/>\n//         </div>\n//     )\n//     }\n\n{/* <Link to={`/detail/${id}`}> esto seria que cuando aga clic en el link me va aparecer el id de cada personaje en un nuevo servidor o Ruta*/}\n{/* pagina the shadow css generator es super util*/}","map":{"version":3,"names":["Link","addFavorite","deleteFavorite","styles","connect","React","jsxDEV","_jsxDEV","Card","Component","constructor","props","state","isFav","render","handleFavorite","setState","id","className","contenedor","children","boton1","onClick","fileName","_jsxFileName","lineNumber","columnNumber","boton","onClose","to","name","caracter","species","gender","img","src","image","alt","mapStateToProps","myFavorite","mapDispatchToProps","dispatch","character"],"sources":["C:/Users/Usuario/OneDrive/Escritorio/FT-M2/rick_and_morty/src/components/Card/Card.jsx"],"sourcesContent":["import {Link} from \"react-router-dom\";\r\nimport { addFavorite,deleteFavorite } from \"../../redux/actions\";\r\nimport styles from \"./Card.module.css\"; // el ./ => esto quiere decir que es en la carpeta... ../ sale de la carpeta y entra en la carpeta que le indiquemos => ../Card/Card.jsx\r\nimport { connect } from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nclass Card extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isFav: false,\r\n        }\r\n    }\r\n    // componentDidMount(){\r\n    //     this.props.myFavorite.forEach(element => {\r\n    //         if(element.id === this.props.id){\r\n    //             this.setState(true);\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n// componentDidMount es un metodo de las class que sirve cuando el componente se monta se ejecuta esta funcion..\r\n\r\n    render(){\r\n        const  handleFavorite = () => {\r\n            if(this.state.isFav === true){\r\n                this.setState(false);\r\n                this.props.deleteFavorite(this.props.id); // aca le pasamos el id..\r\n            } else {\r\n                this.setState(true);\r\n                this.props.addFavorite(this.props); // aca traemos el personaje completo : porque props ===> {con todas las propiedades del mismo}.S\r\n            }\r\n        }\r\n        return (\r\n        <div className={styles.contenedor}>\r\n            {\r\n   this.state.isFav ? (\r\n      <button  className={styles.boton1}  onClick={handleFavorite}>‚ù§Ô∏è</button>\r\n   ) : (\r\n      <button className={styles.boton1}  onClick={handleFavorite}>ü§ç</button>\r\n   )\r\n}\r\n            <button className={styles.boton} onClick={()=>this.props.onClose(this.props.id)}>X</button>\r\n             <Link to={`/detail/${this.props.id}`} className={styles.Link}>  \r\n            <h2>Nombre: {this.props.name}</h2>\r\n            </Link> \r\n            <h2 className={styles.caracter} >Specie: {this.props.species}</h2>\r\n            <h2 className={styles.caracter} >Genero: {this.props.gender}</h2>\r\n            <img  className={styles.img} src={this.props.image} alt=\"\"/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\nreturn {\r\n    myFavorite: state.myFavorite,\r\n}\r\n}\r\n// traemos el state global de redux , esto no los brinda la funcion conecct()..\r\n// y luego esto lo tenemos como props en nuestro componentes Card..\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      addFavorite: (character) => {\r\n        dispatch(addFavorite(character))\r\n      },\r\n      deleteFavorite: (id)=> {\r\n        dispatch(deleteFavorite(id));\r\n    }\r\n    };\r\n  };\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Card);\r\n\r\n// export default function Card ({id,name,species,gender,image,onClose}){\r\n\r\n//     const [isFav , setIsFav] = useState(false);\r\n\r\n//     const dispatch = useDispatch();\r\n//     // dispatch le enviaba informacion a las actiond para que despues la funcion reduce , cambie o modifique el estado global con esa misma informacion\r\n\r\n//    const myFavorite = useSelector(state => state.myFavorite);\r\n       \r\n   \r\n\r\n\r\n\r\n//    useEffect(() => {\r\n//     for(let i = 0; i<myFavorite.length; i++){\r\n//         if(myFavorite[i].id === props.id){\r\n//             setIsFav(true);\r\n//         }\r\n//     }\r\n//     // mapStateToProps().forEach((fav) => {\r\n//     //    if (fav.id === props.id) {\r\n//     //       setIsFav(true);\r\n//     //    }\r\n//     // });\r\n//  }, [myFavorite]);\r\n\r\n//    const handleFavorite = (props) => {\r\n//     if(isFav === true){\r\n//         setIsFav(false);\r\n//         dispatch(deleteFavorite());\r\n//     } else {\r\n//         setIsFav(true);\r\n//         dispatch(addFavorite());\r\n//     }\r\n//    }\r\n\r\n    \r\n//     return (\r\n//         <div className={styles.contenedor}>\r\n//             {\r\n//    isFav ? (\r\n//       <button onClick={handleFavorite}>‚ù§Ô∏è</button>\r\n//    ) : (\r\n//       <button onClick={handleFavorite}>ü§ç</button>\r\n//    )\r\n// }\r\n//             <button className={styles.boton} onClick={()=>onClose(id)}>X</button>\r\n//              <Link to={`/detail/${id}`} className={styles.Link}>  \r\n//             <h2>Nombre: {name}</h2>\r\n//             </Link> \r\n//             <h2 className={styles.caracter} >Specie: {species}</h2>\r\n//             <h2 className={styles.caracter} >Genero: {gender}</h2>\r\n//             <img  className={styles.img} src={image} alt=\"\"/>\r\n//         </div>\r\n//     )\r\n//     }\r\n\r\n    \r\n    {/* <Link to={`/detail/${id}`}> esto seria que cuando aga clic en el link me va aparecer el id de cada personaje en un nuevo servidor o Ruta*/}\r\n    {/* pagina the shadow css generator es super util*/}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}