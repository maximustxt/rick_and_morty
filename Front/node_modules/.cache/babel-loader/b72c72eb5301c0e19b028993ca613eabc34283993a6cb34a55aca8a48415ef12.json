{"ast":null,"code":"import { FILTER, ORDER, GET_FAVORITES, LOGIN, REMPLACE_FAV } from \"./actions\";\nconst initialState = {\n  myFavorites: [],\n  allCharacters: [],\n  idUser: 0\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let actions = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(state.idUser);\n  switch (actions.type) {\n    case GET_FAVORITES:\n      // console.log(actions.payload);\n      return {\n        ...state,\n        myFavorites: actions.payload,\n        //* aca si hago [...state.myFavorites, actions.payload] se va a crear un array nuevo donde dentro van haber elementos y otro array que seria actions.payload..\n        allCharacters: actions.payload //* hacemos una copia de myfavorites en otro array para despues hacer el filter y order y no pisar el array de Myfavorites..\n      };\n\n    case FILTER:\n      if (actions.payload === \"All Character\") {\n        // pregunta si el genero es all character que me traiga todas las cards , osea el array completo (array auxiliar)\n        return {\n          ...state,\n          myFavorites: [...state.allCharacters]\n        };\n      } else {\n        // de lo contrario guardamos en un auxiliar el array completo , para poder manipularlo despues en el filtrado por los otros generos\n        const Arrayaxuliar = [...state.allCharacters];\n        return {\n          ...state,\n          myFavorites: Arrayaxuliar.filter(pars => pars.gender === actions.payload)\n        };\n      }\n    case ORDER:\n      return {\n        ...state,\n        // si algunos de los casos se cumplio myFavorites pasa a ser el array modificado y ordenado... [id 1 , id 2 , id3] , luego en el componente Favorites.jsx recorro este array y voy renderizando cada personaje en base a su orden...\n        myFavorites: actions.payload === \"Descendente\" ? [...state.myFavorites].sort((a, b) => b.id - a.id) // si b es menor al a ===> decendente..\n        : [...state.myFavorites].sort((a, b) => a.id - b.id) // si a es menor a b ===> acendente... y el metodo sort devuelve un nuevo array con los elementos ordenados..\n      };\n    // ! ERROR: puse allcharacters y esta mal !!! porque hace  un ordenamiento de todas las cartas y no de las cartas filtradas en myfavorites.. cuando hago el filter , me devuelve las cartas filtradas en myfavorites y en base a ello debo hacer el ordenamiento... por eso lo anterior estaba mal...\n    case LOGIN:\n      return {\n        ...state,\n        idUser: actions.payload\n      };\n    case REMPLACE_FAV:\n      return {\n        ...state,\n        myFavorites: actions.payload,\n        allCharacters: actions.payload\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default reducer;","map":{"version":3,"names":["FILTER","ORDER","GET_FAVORITES","LOGIN","REMPLACE_FAV","initialState","myFavorites","allCharacters","idUser","reducer","state","arguments","length","undefined","actions","console","log","type","payload","Arrayaxuliar","filter","pars","gender","sort","a","b","id"],"sources":["C:/Users/Usuario/OneDrive/Escritorio/rick_and_morty/Front/src/redux/reducer.js"],"sourcesContent":["import { FILTER, ORDER, GET_FAVORITES, LOGIN, REMPLACE_FAV } from \"./actions\";\r\n\r\nconst initialState = {\r\n  myFavorites: [],\r\n  allCharacters: [],\r\n  idUser: 0,\r\n};\r\n\r\nconst reducer = (state = initialState, actions) => {\r\n  console.log(state.idUser);\r\n  switch (actions.type) {\r\n    case GET_FAVORITES:\r\n      // console.log(actions.payload);\r\n      return {\r\n        ...state,\r\n        myFavorites: actions.payload, //* aca si hago [...state.myFavorites, actions.payload] se va a crear un array nuevo donde dentro van haber elementos y otro array que seria actions.payload..\r\n        allCharacters: actions.payload, //* hacemos una copia de myfavorites en otro array para despues hacer el filter y order y no pisar el array de Myfavorites..\r\n      };\r\n    case FILTER:\r\n      if (actions.payload === \"All Character\") {\r\n        // pregunta si el genero es all character que me traiga todas las cards , osea el array completo (array auxiliar)\r\n        return {\r\n          ...state,\r\n          myFavorites: [...state.allCharacters],\r\n        };\r\n      } else {\r\n        // de lo contrario guardamos en un auxiliar el array completo , para poder manipularlo despues en el filtrado por los otros generos\r\n        const Arrayaxuliar = [...state.allCharacters];\r\n        return {\r\n          ...state,\r\n          myFavorites: Arrayaxuliar.filter(\r\n            (pars) => pars.gender === actions.payload\r\n          ),\r\n        };\r\n      }\r\n\r\n    case ORDER:\r\n      return {\r\n        ...state,\r\n\r\n        // si algunos de los casos se cumplio myFavorites pasa a ser el array modificado y ordenado... [id 1 , id 2 , id3] , luego en el componente Favorites.jsx recorro este array y voy renderizando cada personaje en base a su orden...\r\n        myFavorites:\r\n          actions.payload === \"Descendente\"\r\n            ? [...state.myFavorites].sort((a, b) => b.id - a.id) // si b es menor al a ===> decendente..\r\n            : [...state.myFavorites].sort((a, b) => a.id - b.id), // si a es menor a b ===> acendente... y el metodo sort devuelve un nuevo array con los elementos ordenados..\r\n      }; // ! ERROR: puse allcharacters y esta mal !!! porque hace  un ordenamiento de todas las cartas y no de las cartas filtradas en myfavorites.. cuando hago el filter , me devuelve las cartas filtradas en myfavorites y en base a ello debo hacer el ordenamiento... por eso lo anterior estaba mal...\r\n    case LOGIN:\r\n      return {\r\n        ...state,\r\n        idUser: actions.payload,\r\n      };\r\n\r\n    case REMPLACE_FAV:\r\n      return {\r\n        ...state,\r\n        myFavorites: actions.payload,\r\n        allCharacters: actions.payload,\r\n      };\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,KAAK,EAAEC,aAAa,EAAEC,KAAK,EAAEC,YAAY,QAAQ,WAAW;AAE7E,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,EAAE;EACfC,aAAa,EAAE,EAAE;EACjBC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAAmC;EAAA,IAAlCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,YAAY;EAAA,IAAES,OAAO,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC5CE,OAAO,CAACC,GAAG,CAACN,KAAK,CAACF,MAAM,CAAC;EACzB,QAAQM,OAAO,CAACG,IAAI;IAClB,KAAKf,aAAa;MAChB;MACA,OAAO;QACL,GAAGQ,KAAK;QACRJ,WAAW,EAAEQ,OAAO,CAACI,OAAO;QAAE;QAC9BX,aAAa,EAAEO,OAAO,CAACI,OAAO,CAAE;MAClC,CAAC;;IACH,KAAKlB,MAAM;MACT,IAAIc,OAAO,CAACI,OAAO,KAAK,eAAe,EAAE;QACvC;QACA,OAAO;UACL,GAAGR,KAAK;UACRJ,WAAW,EAAE,CAAC,GAAGI,KAAK,CAACH,aAAa;QACtC,CAAC;MACH,CAAC,MAAM;QACL;QACA,MAAMY,YAAY,GAAG,CAAC,GAAGT,KAAK,CAACH,aAAa,CAAC;QAC7C,OAAO;UACL,GAAGG,KAAK;UACRJ,WAAW,EAAEa,YAAY,CAACC,MAAM,CAC7BC,IAAI,IAAKA,IAAI,CAACC,MAAM,KAAKR,OAAO,CAACI,OAAO;QAE7C,CAAC;MACH;IAEF,KAAKjB,KAAK;MACR,OAAO;QACL,GAAGS,KAAK;QAER;QACAJ,WAAW,EACTQ,OAAO,CAACI,OAAO,KAAK,aAAa,GAC7B,CAAC,GAAGR,KAAK,CAACJ,WAAW,CAAC,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,EAAE,GAAGF,CAAC,CAACE,EAAE,CAAC,CAAC;QAAA,EACnD,CAAC,GAAGhB,KAAK,CAACJ,WAAW,CAAC,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,CAAC,CAAE;MAC5D,CAAC;IAAE;IACL,KAAKvB,KAAK;MACR,OAAO;QACL,GAAGO,KAAK;QACRF,MAAM,EAAEM,OAAO,CAACI;MAClB,CAAC;IAEH,KAAKd,YAAY;MACf,OAAO;QACL,GAAGM,KAAK;QACRJ,WAAW,EAAEQ,OAAO,CAACI,OAAO;QAC5BX,aAAa,EAAEO,OAAO,CAACI;MACzB,CAAC;IAEH;MACE,OAAO;QAAE,GAAGR;MAAM,CAAC;EAAC;AAE1B,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}