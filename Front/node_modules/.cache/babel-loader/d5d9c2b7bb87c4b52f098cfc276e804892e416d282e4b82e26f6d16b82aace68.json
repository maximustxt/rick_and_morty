{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\OneDrive\\\\Escritorio\\\\rick_and_morty\\\\Front\\\\src\\\\components\\\\Cards\\\\Cards.jsx\",\n  _s = $RefreshSig$();\nimport Card from \"../Card/Card\";\nimport styles from \"./Cards.module.css\";\nimport Nav from \"../Nav/Nav\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cards(_ref) {\n  _s();\n  let {\n    characters,\n    onClose,\n    onSearch,\n    idUser,\n    setcharacters\n  } = _ref;\n  /* es el arreglo de <personajes className=\"\"></personajes> tambien usamos la prop onClose =>FUNCTION*/\n\n  const [prevIdUser, setPrevIdUser] = useState(idUser); // creamos un estadoque va a contener el id con el que iniciamos sesion.\n\n  useEffect(() => {\n    if (prevIdUser !== idUser) {\n      // hacemos una condicion diciendo si el stado prevIdUser es diferente de idUser entonces se vacia el array de characters...\n      // de lo contrario no ingresa a este bloque de codigo nunca.\n      setcharacters([]); // se vacias el state.\n      setPrevIdUser(idUser); // el estado PrevIdUser toma el valor del nuevo usuario que inicio sesion.\n      // y la unica manera de modificar el estado es seeteandolo , no hay otra manera... por eso es que si la condicion se cumple va a tomar el nuevo valor del usuario\n    }\n  }, [idUser]);\n  const FuncionCharRandom = async () => {\n    const inicioChar = 1;\n    const FinChar = 826; // cantidad de personajes en total.\n\n    const idCharRandom = inicioChar + Math.floor(Math.random() * FinChar);\n    const response = await axios.get(`http://localhost:3001/onsearch/${idCharRandom}`);\n    setcharacters([...characters, response.data]);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch,\n      FuncionCharRandom: FuncionCharRandom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.contenedor,\n      children: characters === null || characters === void 0 ? void 0 : characters.map(_ref2 => {\n        let {\n          id,\n          name,\n          species,\n          gender,\n          image /*podia hacer destructuring aqui...*/\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Card, {\n          id: id // es el id de cada personaje del array characters.. se lo pasamos como props a Card..\n          ,\n          name: name,\n          species: species,\n          gender: gender,\n          image: image,\n          idUser: idUser,\n          onClose: onClose\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Cards, \"lQEmExvl5v/vwaTkc2fvM/IB2FY=\");\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["Card","styles","Nav","useEffect","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Cards","_ref","_s","characters","onClose","onSearch","idUser","setcharacters","prevIdUser","setPrevIdUser","FuncionCharRandom","inicioChar","FinChar","idCharRandom","Math","floor","random","response","get","data","children","fileName","_jsxFileName","lineNumber","columnNumber","className","contenedor","map","_ref2","id","name","species","gender","image","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/OneDrive/Escritorio/rick_and_morty/Front/src/components/Cards/Cards.jsx"],"sourcesContent":["import Card from \"../Card/Card\";\r\nimport styles from \"./Cards.module.css\";\r\nimport Nav from \"../Nav/Nav\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nexport default function Cards({\r\n  characters,\r\n  onClose,\r\n  onSearch,\r\n  idUser,\r\n  setcharacters,\r\n}) {\r\n  /* es el arreglo de <personajes className=\"\"></personajes> tambien usamos la prop onClose =>FUNCTION*/\r\n\r\n  const [prevIdUser, setPrevIdUser] = useState(idUser); // creamos un estadoque va a contener el id con el que iniciamos sesion.\r\n\r\n  useEffect(() => {\r\n    if (prevIdUser !== idUser) {\r\n      // hacemos una condicion diciendo si el stado prevIdUser es diferente de idUser entonces se vacia el array de characters...\r\n      // de lo contrario no ingresa a este bloque de codigo nunca.\r\n      setcharacters([]); // se vacias el state.\r\n      setPrevIdUser(idUser); // el estado PrevIdUser toma el valor del nuevo usuario que inicio sesion.\r\n      // y la unica manera de modificar el estado es seeteandolo , no hay otra manera... por eso es que si la condicion se cumple va a tomar el nuevo valor del usuario\r\n    }\r\n  }, [idUser]);\r\n\r\n  const FuncionCharRandom = async () => {\r\n    const inicioChar = 1;\r\n    const FinChar = 826; // cantidad de personajes en total.\r\n\r\n    const idCharRandom = inicioChar + Math.floor(Math.random() * FinChar);\r\n\r\n    const response = await axios.get(\r\n      `http://localhost:3001/onsearch/${idCharRandom}`\r\n    );\r\n    setcharacters([...characters, response.data]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Nav onSearch={onSearch} FuncionCharRandom={FuncionCharRandom} />\r\n      <div className={styles.contenedor}>\r\n        {characters?.map(\r\n          ({\r\n            id,\r\n            name,\r\n            species,\r\n            gender,\r\n            image /*podia hacer destructuring aqui...*/,\r\n          }) => (\r\n            <Card\r\n              key={id}\r\n              id={id} // es el id de cada personaje del array characters.. se lo pasamos como props a Card..\r\n              name={name}\r\n              species={species}\r\n              gender={gender}\r\n              image={image}\r\n              idUser={idUser}\r\n              onClose={onClose}\r\n            />\r\n          )\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,cAAc;AAC/B,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC1B,eAAe,SAASC,KAAKA,CAAAC,IAAA,EAM1B;EAAAC,EAAA;EAAA,IAN2B;IAC5BC,UAAU;IACVC,OAAO;IACPC,QAAQ;IACRC,MAAM;IACNC;EACF,CAAC,GAAAN,IAAA;EACC;;EAEA,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAACY,MAAM,CAAC,CAAC,CAAC;;EAEtDb,SAAS,CAAC,MAAM;IACd,IAAIe,UAAU,KAAKF,MAAM,EAAE;MACzB;MACA;MACAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;MACnBE,aAAa,CAACH,MAAM,CAAC,CAAC,CAAC;MACvB;IACF;EACF,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMC,UAAU,GAAG,CAAC;IACpB,MAAMC,OAAO,GAAG,GAAG,CAAC,CAAC;;IAErB,MAAMC,YAAY,GAAGF,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,OAAO,CAAC;IAErE,MAAMK,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAG,CAC7B,kCAAiCL,YAAa,EAAC,CACjD;IACDN,aAAa,CAAC,CAAC,GAAGJ,UAAU,EAAEc,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC/C,CAAC;EAED,oBACEtB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,gBACEvB,OAAA,CAACL,GAAG;MAACa,QAAQ,EAAEA,QAAS;MAACK,iBAAiB,EAAEA;IAAkB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACjE3B,OAAA;MAAK4B,SAAS,EAAElC,MAAM,CAACmC,UAAW;MAAAN,QAAA,EAC/BjB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEwB,GAAG,CACdC,KAAA;QAAA,IAAC;UACCC,EAAE;UACFC,IAAI;UACJC,OAAO;UACPC,MAAM;UACNC,KAAK,CAAC;QACR,CAAC,GAAAL,KAAA;QAAA,oBACC/B,OAAA,CAACP,IAAI;UAEHuC,EAAE,EAAEA,EAAG,CAAC;UAAA;UACRC,IAAI,EAAEA,IAAK;UACXC,OAAO,EAAEA,OAAQ;UACjBC,MAAM,EAAEA,MAAO;UACfC,KAAK,EAAEA,KAAM;UACb3B,MAAM,EAAEA,MAAO;UACfF,OAAO,EAAEA;QAAQ,GAPZyB,EAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAQP;MAAA,CACH;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACG;EAAA,gBACL;AAEP;AAACtB,EAAA,CA5DuBF,KAAK;AAAAkC,EAAA,GAALlC,KAAK;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}