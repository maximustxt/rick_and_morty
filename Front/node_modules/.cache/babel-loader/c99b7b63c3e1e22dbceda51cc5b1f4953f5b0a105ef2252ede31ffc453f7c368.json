{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\OneDrive\\\\Escritorio\\\\FT-M2\\\\rick_and_morty\\\\src\\\\components\\\\Card\\\\Card.jsx\",\n  _s = $RefreshSig$();\nimport { Link } from \"react-router-dom\";\nimport { addFavorite, deleteFavorite } from \"../../redux/actions\";\nimport styles from \"./Card.module.css\"; // el ./ => esto quiere decir que es en la carpeta... ../ sale de la carpeta y entra en la carpeta que le indiquemos => ../Card/Card.jsx\nimport { connect } from \"react-redux\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Card(_ref) {\n  _s();\n  let {\n    id,\n    name,\n    species,\n    gender,\n    image,\n    onClose,\n    addFavorite,\n    deleteFavorite\n  } = _ref;\n  const [isFav, setIsFav] = useState(false);\n  const dispatch = useDispatch();\n  // dispatch le enviaba informacion a las actiond para que despues la funcion reduce , cambie o modifique el estado global con esa misma informacion\n\n  const myFavorite = useSelector(state => state.myFavorite);\n  useEffect(() => {\n    for (let i = 0; i < myFavorite.length; i++) {\n      if (myFavorite[i].id === props.id) {\n        setIsFav(true);\n      }\n    }\n  }, [myFavorite]);\n  //     // mapStateToProps().forEach((fav) => {\n  //     //    if (fav.id === props.id) {\n  //     //       setIsFav(true);\n  //     //    }\n  //     // });\n\n  const handleFavorite = props => {\n    if (isFav === true) {\n      setIsFav(false);\n      dispatch(deleteFavorite(id));\n    } else {\n      setIsFav(true);\n      dispatch(addFavorite({\n        id,\n        name,\n        species,\n        gender,\n        image,\n        onClose\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.contenedor,\n    children: [isFav ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFavorite,\n      children: \"\\u2764\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 32\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFavorite,\n      children: \"\\uD83E\\uDD0D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.boton,\n      onClick: () => onClose(id),\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/detail/${id}`,\n      className: styles.Link,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Nombre: \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.caracter,\n      children: [\"Specie: \", species]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.caracter,\n      children: [\"Genero: \", gender]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 42\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: styles.img,\n      src: image,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 25\n  }, this);\n}\n_s(Card, \"q4Thd1Mw67/liMxeAEKdnAKJMx4=\", true);\n_c = Card;\nconst mapStateToProps = state => {\n  return {\n    myFavorite: state.myFavorite\n  };\n};\n// traemos el state global de redux , esto no los brinda la funcion conecct()..\n// y luego esto lo tenemos como props en nuestro componentes Card..\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addFavorite: character => {\n      dispatch(addFavorite(character));\n    },\n    deleteFavorite: id => {\n      dispatch(deleteFavorite(id));\n    }\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\n{/* <Link to={`/detail/${id}`}> esto seria que cuando aga clic en el link me va aparecer el id de cada personaje en un nuevo servidor o Ruta*/}\n{/* pagina the shadow css generator es super util*/}\n// class Card extends React.Component{\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             isFav: false,\n//         }\n//     }\n//     componentDidMount(){\n//         this.props.myFavorite.forEach(char => {\n//              if(char.id === this.props.id){\n//                  this.setState(true);\n//              }\n//         });\n//      }\n\n// // componentDidMount es un metodo de las class que sirve cuando el componente se monta se ejecuta esta funcion..\n\n//     render(){\n//         const  handleFavorite = () => {\n//             if(this.state.isFav === true){\n//                 this.setState(false);\n//                 this.props.deleteFavorite(this.props.id); // aca le pasamos el id..\n//             } else {\n//                 this.setState(true);\n//                 this.props.addFavorite(this.props); // aca traemos el personaje completo : porque props ===> {con todas las propiedades del mismo}.S\n//             }\n//         }\n//         return (\n//         <div className={styles.contenedor}>\n//             {this.state.isFav ? (<button  className={styles.boton1}  onClick={handleFavorite}>‚ù§Ô∏è</button>) : (<button className={styles.boton1}  onClick={handleFavorite}>ü§ç</button>)}\n//             <button className={styles.boton} onClick={()=>this.props.onClose(this.props.id)}>X</button>\n//              <Link to={`/detail/${this.props.id}`} className={styles.Link}>  \n//             <h2>Nombre: {this.props.name}</h2>\n//             </Link> \n//             <h2 className={styles.caracter} >Specie: {this.props.species}</h2>\n//             <h2 className={styles.caracter} >Genero: {this.props.gender}</h2>\n//             <img  className={styles.img} src={this.props.image} alt=\"\"/>\n//         </div>\n//         )\n//     }\n// }\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["Link","addFavorite","deleteFavorite","styles","connect","React","jsxDEV","_jsxDEV","Card","_ref","_s","id","name","species","gender","image","onClose","isFav","setIsFav","useState","dispatch","useDispatch","myFavorite","useSelector","state","useEffect","i","length","props","handleFavorite","className","contenedor","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","boton","to","caracter","img","src","alt","_c","mapStateToProps","mapDispatchToProps","character","$RefreshReg$"],"sources":["C:/Users/Usuario/OneDrive/Escritorio/FT-M2/rick_and_morty/src/components/Card/Card.jsx"],"sourcesContent":["import {Link} from \"react-router-dom\";\r\nimport { addFavorite,deleteFavorite } from \"../../redux/actions\";\r\nimport styles from \"./Card.module.css\"; // el ./ => esto quiere decir que es en la carpeta... ../ sale de la carpeta y entra en la carpeta que le indiquemos => ../Card/Card.jsx\r\nimport { connect } from \"react-redux\";\r\nimport React from \"react\";\r\n\r\n\r\n function Card ({id,name,species,gender,image,onClose,addFavorite,deleteFavorite}){\r\n    \r\n       const [isFav , setIsFav] = useState(false);\r\n    \r\n       const dispatch = useDispatch();\r\n      // dispatch le enviaba informacion a las actiond para que despues la funcion reduce , cambie o modifique el estado global con esa misma informacion\r\n    \r\n      const myFavorite = useSelector(state => state.myFavorite);\r\n    \r\n    \r\n    \r\n    \r\n    \r\n       useEffect(() => {\r\n            for(let i = 0; i<myFavorite.length; i++){\r\n                     if(myFavorite[i].id === props.id){\r\n                             setIsFav(true);\r\n                        }\r\n                    }\r\n                }, [myFavorite]);\r\n                //     // mapStateToProps().forEach((fav) => {\r\n                    //     //    if (fav.id === props.id) {\r\n                        //     //       setIsFav(true);\r\n//     //    }\r\n//     // });\r\n\r\n    const handleFavorite = (props) => {\r\n         if(isFav === true){\r\n                setIsFav(false);\r\n                dispatch(deleteFavorite(id));\r\n            } else {\r\n                    setIsFav(true);\r\n                     dispatch(addFavorite({id,name,species,gender,image,onClose}));\r\n                }\r\n                }\r\n            \r\n            \r\n                 return (\r\n                        <div className={styles.contenedor}>\r\n                             {\r\n                        isFav ? (\r\n                               <button onClick={handleFavorite}>‚ù§Ô∏è</button>\r\n                            ) : (\r\n                                   <button onClick={handleFavorite}>ü§ç</button>\r\n                                )\r\n                             }\r\n                                         <button className={styles.boton} onClick={()=>onClose(id)}>X</button>\r\n                                          <Link to={`/detail/${id}`} className={styles.Link}>  \r\n                                         <h2>Nombre: {name}</h2>\r\n                                         </Link> \r\n                                         <h2 className={styles.caracter} >Specie: {species}</h2>\r\n                                         <h2 className={styles.caracter} >Genero: {gender}</h2>\r\n                                      <img  className={styles.img} src={image} alt=\"\"/>\r\n                                     </div>\r\n                                 )\r\n                                 }\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        myFavorite: state.myFavorite,\r\n    }\r\n}\r\n// traemos el state global de redux , esto no los brinda la funcion conecct()..\r\n// y luego esto lo tenemos como props en nuestro componentes Card..\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n      addFavorite: (character) => {\r\n          dispatch(addFavorite(character))\r\n        },\r\n        deleteFavorite: (id)=> {\r\n            dispatch(deleteFavorite(id));\r\n        }\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Card);\r\n\r\n                            \r\n                            \r\n    {/* <Link to={`/detail/${id}`}> esto seria que cuando aga clic en el link me va aparecer el id de cada personaje en un nuevo servidor o Ruta*/}\r\n    {/* pagina the shadow css generator es super util*/}\r\n    // class Card extends React.Component{\r\n    //     constructor(props){\r\n    //         super(props)\r\n    //         this.state = {\r\n    //             isFav: false,\r\n    //         }\r\n    //     }\r\n    //     componentDidMount(){\r\n    //         this.props.myFavorite.forEach(char => {\r\n    //              if(char.id === this.props.id){\r\n    //                  this.setState(true);\r\n    //              }\r\n    //         });\r\n    //      }\r\n    \r\n    // // componentDidMount es un metodo de las class que sirve cuando el componente se monta se ejecuta esta funcion..\r\n    \r\n    //     render(){\r\n    //         const  handleFavorite = () => {\r\n    //             if(this.state.isFav === true){\r\n    //                 this.setState(false);\r\n    //                 this.props.deleteFavorite(this.props.id); // aca le pasamos el id..\r\n    //             } else {\r\n    //                 this.setState(true);\r\n    //                 this.props.addFavorite(this.props); // aca traemos el personaje completo : porque props ===> {con todas las propiedades del mismo}.S\r\n    //             }\r\n    //         }\r\n    //         return (\r\n    //         <div className={styles.contenedor}>\r\n    //             {this.state.isFav ? (<button  className={styles.boton1}  onClick={handleFavorite}>‚ù§Ô∏è</button>) : (<button className={styles.boton1}  onClick={handleFavorite}>ü§ç</button>)}\r\n    //             <button className={styles.boton} onClick={()=>this.props.onClose(this.props.id)}>X</button>\r\n    //              <Link to={`/detail/${this.props.id}`} className={styles.Link}>  \r\n    //             <h2>Nombre: {this.props.name}</h2>\r\n    //             </Link> \r\n    //             <h2 className={styles.caracter} >Specie: {this.props.species}</h2>\r\n    //             <h2 className={styles.caracter} >Genero: {this.props.gender}</h2>\r\n    //             <img  className={styles.img} src={this.props.image} alt=\"\"/>\r\n    //         </div>\r\n    //         )\r\n    //     }\r\n    // }"],"mappings":";;AAAA,SAAQA,IAAI,QAAO,kBAAkB;AACrC,SAASC,WAAW,EAACC,cAAc,QAAQ,qBAAqB;AAChE,OAAOC,MAAM,MAAM,mBAAmB,CAAC,CAAC;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzB,SAASC,IAAIA,CAAAC,IAAA,EAAoE;EAAAC,EAAA;EAAA,IAAlE;IAACC,EAAE;IAACC,IAAI;IAACC,OAAO;IAACC,MAAM;IAACC,KAAK;IAACC,OAAO;IAACf,WAAW;IAACC;EAAc,CAAC,GAAAO,IAAA;EAE1E,MAAM,CAACQ,KAAK,EAAGC,QAAQ,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAE1C,MAAMC,QAAQ,GAAGC,WAAW,EAAE;EAC/B;;EAEA,MAAMC,UAAU,GAAGC,WAAW,CAACC,KAAK,IAAIA,KAAK,CAACF,UAAU,CAAC;EAMxDG,SAAS,CAAC,MAAM;IACX,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACJ,UAAU,CAACK,MAAM,EAAED,CAAC,EAAE,EAAC;MAC/B,IAAGJ,UAAU,CAACI,CAAC,CAAC,CAACf,EAAE,KAAKiB,KAAK,CAACjB,EAAE,EAAC;QACzBO,QAAQ,CAAC,IAAI,CAAC;MACnB;IACJ;EACJ,CAAC,EAAE,CAACI,UAAU,CAAC,CAAC;EAChB;EACI;EACI;EACxB;EACA;;EAEI,MAAMO,cAAc,GAAID,KAAK,IAAK;IAC7B,IAAGX,KAAK,KAAK,IAAI,EAAC;MACXC,QAAQ,CAAC,KAAK,CAAC;MACfE,QAAQ,CAAClB,cAAc,CAACS,EAAE,CAAC,CAAC;IAChC,CAAC,MAAM;MACCO,QAAQ,CAAC,IAAI,CAAC;MACbE,QAAQ,CAACnB,WAAW,CAAC;QAACU,EAAE;QAACC,IAAI;QAACC,OAAO;QAACC,MAAM;QAACC,KAAK;QAACC;MAAO,CAAC,CAAC,CAAC;IAClE;EACA,CAAC;EAGA,oBACOT,OAAA;IAAKuB,SAAS,EAAE3B,MAAM,CAAC4B,UAAW;IAAAC,QAAA,GAElCf,KAAK,gBACEV,OAAA;MAAQ0B,OAAO,EAAEJ,cAAe;MAAAG,QAAA,EAAC;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,gBAExC9B,OAAA;MAAQ0B,OAAO,EAAEJ,cAAe;MAAAG,QAAA,EAAC;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACrC,eAEQ9B,OAAA;MAAQuB,SAAS,EAAE3B,MAAM,CAACmC,KAAM;MAACL,OAAO,EAAEA,CAAA,KAAIjB,OAAO,CAACL,EAAE,CAAE;MAAAqB,QAAA,EAAC;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACpE9B,OAAA,CAACP,IAAI;MAACuC,EAAE,EAAG,WAAU5B,EAAG,EAAE;MAACmB,SAAS,EAAE3B,MAAM,CAACH,IAAK;MAAAgC,QAAA,eACnDzB,OAAA;QAAAyB,QAAA,GAAI,UAAQ,EAACpB,IAAI;MAAA;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAM;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAChB,eACP9B,OAAA;MAAIuB,SAAS,EAAE3B,MAAM,CAACqC,QAAS;MAAAR,QAAA,GAAE,UAAQ,EAACnB,OAAO;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACvD9B,OAAA;MAAIuB,SAAS,EAAE3B,MAAM,CAACqC,QAAS;MAAAR,QAAA,GAAE,UAAQ,EAAClB,MAAM;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACzD9B,OAAA;MAAMuB,SAAS,EAAE3B,MAAM,CAACsC,GAAI;MAACC,GAAG,EAAE3B,KAAM;MAAC4B,GAAG,EAAC;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC5C;AAEV;AAAC3B,EAAA,CAvDxBF,IAAI;AAAAoC,EAAA,GAAJpC,IAAI;AA0Dd,MAAMqC,eAAe,GAAIrB,KAAK,IAAK;EAC/B,OAAO;IACHF,UAAU,EAAEE,KAAK,CAACF;EACtB,CAAC;AACL,CAAC;AACD;AACA;;AAEA,MAAMwB,kBAAkB,GAAI1B,QAAQ,IAAK;EACrC,OAAO;IACLnB,WAAW,EAAG8C,SAAS,IAAK;MACxB3B,QAAQ,CAACnB,WAAW,CAAC8C,SAAS,CAAC,CAAC;IAClC,CAAC;IACD7C,cAAc,EAAGS,EAAE,IAAI;MACnBS,QAAQ,CAAClB,cAAc,CAACS,EAAE,CAAC,CAAC;IAChC;EACJ,CAAC;AACL,CAAC;AAID,eAAeP,OAAO,CAACyC,eAAe,EAACC,kBAAkB,CAAC,CAACtC,IAAI,CAAC;AAI5D,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAoC,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}